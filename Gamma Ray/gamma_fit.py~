import numpy as np
import matplotlib.pyplot as plt
import os
plt.rc('font',family='serif')
plt.rc('text',usetex=True)
lstfiles = os.listdir('.')
lstfiles.sort()

spec_Na =np.transpose(np.loadtxt('02_03_2016_15_19_04.dat',skiprows=2,usecols=(0,1)))
spec_Cs =np.transpose(np.loadtxt('02_03_2016_15_25_15.dat',skiprows=2,usecols=(0,1)))
spec_Co = np.transpose(np.loadtxt('02_03_2016_15_29_31.dat',skiprows=2, usecols=(0,1)))
def standdev(data):
	return np.sqrt( np.sum( (data-np.mean(data) )**2)/np.float(len(data)-1.))

def linleastsquares_general(data,order): #many orders!
	n  = len(data[0])
	x= data[0]
	y=data[1]
	nmatleft= np.empty( (order+1,order+1))
	
	nmatright = np.empty( (order+1,1))
	for i in range(order+1):
		for j in range(order+1):
			if i == 0 and j==0:
				nmatleft[0][0] = n
			else:
				nmatleft[i][j] = np.sum(x**(i+j))
		nmatright[i][0] = np.sum(x**i * y)
	inv_left = np.linalg.inv(nmatleft)
	final=np.dot(inv_left,nmatright)
	
	return final
def findpeaks(spectrum,limit,width,typ,cent): #spectrum is 1 two-dimensional array so spectrum[0] is the x-array, spectrum[1] y array
	spec_x=spectrum[0]
	spec_y = spectrum[1]
	peaks_x = []
	peaks_y = []
	for i in range(len(spec_x)-1): # -2 because itll b
		if all(spec_y[i] > spec_y[i-width:i]) and all(spec_y[i] >spec_y[i+1:i+width]) and spec_y[i] > limit:
			peaks_x.append(np.where(spec_x == spec_x[i])[0])	
			peaks_y.append(spec_y[i])
	centroids= []	
	errors=[]
	for peak in peaks_x: #finds centroids of peaks
		xran= spec_x[peak-5:peak+5]
		
		intens_ran= spec_y[peak-5:peak+5]
		numer=[]		
		centroid = np.sum(np.array(xran*intens_ran))/np.sum(intens_ran)
		
		centroids.append(centroid)
		#errors.append( standdev(xran)**2/(np.sum(intens_ran) ))
	if cent and centroids != []:
		for centroid in centroids: #plots centroids 
			plt.axvline(x=centroid,color='r',linestyle='--')
		plt.axvline(centroids[0],color='r',linestyle='--',label=typ+' Peak Centroid')
	
	
		plt.plot(spec_x,spec_y,linewidth=2,label=typ)

		plt.tick_params(axis='both', which='major', labelsize=20)
		plt.tick_params(axis='both', which='minor', labelsize=15)
		plt.show()

	return np.array(centroids)


cent_Na = findpeaks(spec_Na,150,10,'Neon', False)
cent_Cs = findpeaks(spec_Cs,500,10,'Cesium', False)
cent_Co = findpeaks(spec_Co,1000,10,'Cobalt', False)
errors = [326.,2947.,372.,2560.,2569.]

arr_cent = np.array([3.0613289748953973, 4.0025605026929982, 3.4341010115135413,
       3.9516175791641639, 4.0530974946344882])
def three_spec():
	fig = plt.figure()
	ax1 = fig.add_subplot(131)
	plt.axvline(x=cent_Na[0], color='r',linestyle='--',label='Sodium-22 Peaks')
	plt.axvline(x=cent_Na[1], color='r',linestyle='--')
	plt.plot(spec_Na[0],spec_Na[1], linewidth=2, label='Sodium-22')
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.ylabel('Intensity[Counts]',size=40)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.legend(loc=2, fontsize=19)
	ax2 = fig.add_subplot(132)
	plt.axvline(x=cent_Cs[0], color='r',linestyle='--',label='Cesium-137 Peak')
	plt.plot(spec_Cs[0],spec_Cs[1], linewidth=2, label='Cesium-137')
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.xlabel('Energy',size=40)
	plt.legend(fontsize=20)
	ax3= fig.add_subplot(133)
	plt.axvline(x=cent_Co[0], color='r',linestyle='--',label='Cobalt-60 Peaks')
	plt.axvline(x=cent_Co[1], color='r',linestyle='--')
	plt.plot(spec_Co[0],spec_Co[1], linewidth=2, label='Cobalt-60')
	plt.legend(loc=2, fontsize=20)
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	

	plt.show()
#three_spec()
arr_cent.sort()
arr_energies = np.array([0.511,1.28,0.6616,1.17,1.33])
arr_energies.sort()
cfit, mfit = linleastsquares_general([arr_cent, arr_energies], 1)
quad_0, quad_1, quad_2= linleastsquares_general([arr_cent,arr_energies],2)
print cfit, mfit, 'linear'
print quad_0, quad_1, quad_2,'quadratic'
ran = np.linspace(min(arr_cent), max(arr_cent), 100)
linfit=mfit*arr_cent+cfit
quadfit = quad_0+quad_1*arr_cent+quad_2*arr_cent**2
linfitpl =  mfit*ran + cfit
quadfitpl = quad_0 + quad_1*ran + quad_2 * ran**2
def plot_fits():
	fig =plt.figure()
	ax1= fig.add_subplot(121)
	
	plt.plot(arr_cent, arr_energies,'go',ms=10,label='Data')
	for i in range(len(errors)-1):
		plt.errorbar(arr_cent[i], arr_energies[i], xerr=1./np.sqrt(errors[i]))
	plt.ylabel('Energy(MeV)', size=40)
	plt.xlabel('Channel', size=40)
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.plot(ran, linfitpl,'r', linewidth=3,label='Linear Fit')
	plt.plot(ran, quadfitpl,'b', linewidth=3,label='Quad Fit')
	plt.legend(loc=2, fontsize=20)
	ax2=fig.add_subplot(122)
	print 'linear residual mean, std = ', np.mean(linfit-arr_energies), np.std(linfit-arr_energies)
	print 'quadratic residual mean, std = ', np.mean(quadfit-arr_energies), np.std(quadfit-arr_energies)
	plt.plot(arr_cent, linfit-arr_energies,'ro', ms=10,label='Linear Residuals')
	plt.plot(arr_cent, quadfit-arr_energies,'b*', ms=10, label='Quadratic Residuals')
	plt.ylabel(r'$\Delta$ Energy(MeV)', size=40)
	plt.xlabel('Channel', size=40)
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)

	plt.legend(fontsize=20)	
	plt.show()
#plot_fits()
def ideal_quadfn(x,quad_2,quad_1,quad_0):
	return quad_2*x**2+quad_1*x+quad_0
def ideal_lin(x, m, c):
	return x*m + c
def fullwidth_half_max(peak, spec):
	pix = spec[0]
	intens = spec[1]
	ran = np.arange(peak-15, peak+15)
        full_wid = np.where(intens[ran] >= intens[peak]/2.)[0]
	print intens[ran]
	print intens[peak]
	area = np.sum( intens[ran][full_wid]*(pix[1]-pix[0]))
	print ran[full_wid]
	width= pix[max(ran[full_wid])] - pix[min(ran[full_wid])] # prints the width of the peak
	print 'width=', width
	return width
#spec_Na[0] = ideal_quadfn(spec_Na[0],quad_2,quad_1, quad_0)




spec_Na_use = np.where(spec_Na[0] > 2.95)[0]
spec_Na_x = spec_Na[0][spec_Na_use]
spec_Na_x = ideal_quadfn(spec_Na_x, quad_2,quad_1,quad_0)
cent_Na = ideal_quadfn(cent_Na,quad_2,quad_1, quad_0)

spec_co_x = spec_Co[0][np.where(spec_Co[0] > 3 ) ]
spec_co_y = spec_Co[1][np.where(spec_Co[0] > 3 ) ]
spec_co_x = ideal_quadfn(spec_co_x, quad_2,quad_1,quad_0)
cent_co = ideal_quadfn(cent_Co,quad_2,quad_1, quad_0)

spec_cs_x = spec_Cs[0][np.where(spec_Cs[0] >3 )]
spec_cs_y = spec_Cs[1][np.where(spec_Cs[0] >3)]

spec_cs_x = ideal_quadfn(spec_cs_x,quad_2,quad_1,quad_0)
cent_Cs = ideal_quadfn(cent_Cs,quad_2,quad_1, quad_0)


peak_x_na =  np.where(spec_Na[1][spec_Na_use] == max(spec_Na[1][spec_Na_use]))[0]
peak_x_co =  np.where(spec_co_y == max(spec_co_y))[0]
peak_x_cs =  np.where(spec_co_y == max(spec_cs_y))[0]

width_na = fullwidth_half_max(peak_x_na,[spec_Na_x,spec_Na[1][spec_Na_use]])
width_co = fullwidth_half_max(peak_x_co,[spec_co_x, spec_co_y])
width_cs= fullwidth_half_max(peak_x_cs,[spec_cs_x,spec_cs_y])
#plotting
def plot_cal():
	fig = plt.figure()
	ax1= fig.add_subplot(131)
	plt.plot(spec_Na_x,spec_Na[1][spec_Na_use],label='Sodium')
	plt.axvline(x=cent_Na[0], color='r',linestyle='--',label='Sodium-22 Peaks')
	plt.axvline(x=cent_Na[1], color='r',linestyle='--')
	plt.legend(loc=2, fontsize=20)
	plt.ylabel('Intensity', size=40)
	#plt.xlabel('Energy[MeV]', size=40)
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)

	plt.xlim([0,1.5])
	ax2 = fig.add_subplot(132)
	plt.plot(spec_cs_x,spec_cs_y,label='Cesium')
	plt.xlabel('Energy [MeV]', size=40)
	#plt.ylabel('Intensity', size=40)
	plt.axvline(x=cent_Cs[0], color='r',linestyle='--',label='Cesium-137 Peak')

	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.xlim([.5,1])

	plt.legend(loc=1, fontsize=20)

	
	ax3 = fig.add_subplot(133)
	plt.plot(spec_co_x,spec_co_y,label='Cobalt')
	#plt.xlabel('Energy [MeV]', size=40)
	#plt.ylabel('Intensity', size=40)
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.axvline(x=cent_co[0], color='r',linestyle='--',label='Cobalt-60 Peaks')
	plt.axvline(x=cent_co[1], color='r',linestyle='--')

	plt.legend(loc=1, fontsize=20)

	plt.xlim([.5, 2])

	plt.show()
#plot_cal()

def plot_inv_sq():
	lstfil = ['02_03_2016_15_40_37.dat','02_03_2016_15_48_35.dat',
	'02_03_2016_16_04_25.dat']#,'02_03_2016_16_24_24.dat']
	specs= [np.transpose(np.loadtxt(i,skiprows=2, usecols=(0,1))) for i in lstfil ]
	cent = [findpeaks(specs[i],100, 10,'Sodium-22',False) for i in range(len(lstfil))]
	peakval1 = max(specs[0][1])
	peakval2 = max(specs[1][1])
	peakval3 = max(specs[2][1])
	xr=[26.9, 53.8,  79.3]

	peaks = [peakval1,peakval2, peakval3]
	errors = [1./np.sqrt(i) for i in peaks]

	plt.plot(xr,peaks,'o')
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.xlabel('Distance [cm]',size=40)
	plt.ylabel('Intensity [counts]',size=40)
	for j in range(len(peaks)):
		plt.errorbar(xr[j], peaks[j], yerr= errors[j])
	plt.show()
	return peakval1, peakval2, peakval3

#cen = plot_inv_sq()

def plot_gain():
	varied_voltages= lstfiles[31:73]
	specs = [np.transpose(np.loadtxt(varied_voltages[i]
		,skiprows=2,usecols=(0,1))) for i in range(len(varied_voltages)-1)]
	peaks = np.array([])
	peak_areas= np.array([])
	errors=np.array([])

	for i in range(len(varied_voltages)-1):
		peak_spot = np.where(specs[i][1] == max(specs[i][1]))[0][0]
		peak_x = specs[i][0][peak_spot]
		area_underpeak= fullwidth_half_max(peak_spot,specs[i])
		peak_areas = np.append(peak_areas, area_underpeak)
		peaks = np.append(peaks, peak_x)
		errors = np.append(errors, 1./np.sqrt(specs[i][1][peak_spot]))

	xr= np.arange(400,810,10 )
	xr =np.delete(xr, 6)
	peaks = np.delete(peaks,6)
	peak_areas=np.delete(peak_areas,6)
	plt.plot(xr, peaks,'o', ms=5,label='Peak Position of Cesium-137')
    	
	for i in range(len(peaks)-1):
		plt.errorbar(xr[i], peaks[i], yerr=errors[i],c='r')
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.xlabel('Voltage',size=40)
	plt.ylabel('Peak Position',size=40)
	plt.legend(loc=2,fontsize=25)
	plt.show()
	a6,a5,a4,a3,a2,a1,a0=np.polyfit(xr[-24:],peaks[-24:],6)

	fit6=a0+a1*xr[-24:]+a2*xr[-24:]**2+a3*xr[-24:]**3+a4*xr[-24:]**4+a5*xr[-24:]**5+a6*xr[-24:]**6
	a5,a4,a3,a2,a1,a0=np.polyfit(xr[-24:],peaks[-24:],5)
	fit5=a0+a1*xr[-24:]+a2*xr[-24:]**2+a3*xr[-24:]**3+a4*xr[-24:]**4+a5*xr[-24:]**5
	a4,a3,a2,a1,a0=np.polyfit(xr[-24:],peaks[-24:],4)
	fit4=a0+a1*xr[-24:]+a2*xr[-24:]**2+a3*xr[-24:]**3+a4*xr[-24:]**4
	a3,a2,a1,a0=np.polyfit(xr[-24:],peaks[-24:],3)
	fit3=a0+a1*xr[-24:]+a2*xr[-24:]**2+a3*xr[-24:]**3

	a2,a1,a0=np.polyfit(xr[-24:],peaks[-24:],2)
	fit2=a0+a1*xr[-24:]+a2*xr[-24:]**2
	print a0,a1,a2,a3
	#peak_fit = ideal_quadfn(xr, a3_2,quad_1,quad_0)

	plt.plot(xr[-24:], peaks[-24:],'o', ms=10,label='Peak Position of Cesium-137')
	plt.plot(xr[-24:],fit6,'--', label='Sextic')
	plt.plot(xr[-24:],fit5,'--', label='Quintic')
	plt.plot(xr[-24:],fit4,'--', label='Quartic')
	for i in range(len(peaks[-21:])-1):
		plt.errorbar(xr[-21:][i], peaks[-21:][i], yerr=errors[-21:][i],c='r')
	plt.plot(xr[-24:],fit3,'--', label='Cubic')
	plt.plot(xr[-24:],fit2,'--', label='Quadratic')
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.xlabel('Voltage',size=40)
	plt.ylabel('Peak Position',size=40)
	plt.legend(loc=2, fontsize=25)

	plt.show()
	#now for residuals!
	resid6= fit6- peaks[-24:]
	print 'resid6',np.mean(resid6), np.std(resid6,ddof=1)
	
	resid5= fit5- peaks[-24:]
	print 'resid6',np.mean(resid5)	, np.std(resid5,ddof=1)
	resid4= fit4- peaks[-24:]
	print 'resid4',np.mean(resid4)	, np.std(resid4,ddof=1)
	resid3= fit3- peaks[-24:]
	print 'resid3',np.mean(resid3)	, np.std(resid3,ddof=1)
	resid2= fit2- peaks[-24:]
	print 'resid2',np.mean(resid2)	, np.std(resid2,ddof=1)
	plt.plot(xr[-24:],resid6, 'o',ms=10,label='Sextic Residuals')
	plt.plot(xr[-24:],resid5,'o',ms=10, label='Quintic Residuals')
	plt.plot(xr[-24:],resid4,'o',ms=10, label='Quartic Residuals')
	plt.plot(xr[-24:],resid3,'o',ms=10, label='Cubic Residuals')
	plt.plot(xr[-24:],resid2,'o',ms=10, label='Quadratic Residuals')
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.xlabel('Voltage',size=40)
	plt.ylabel('Peak Positional Residual',size=40)
	plt.legend(loc=2, fontsize=25)
	plt.show()
	print len(peak_areas), len(xr)
	plt.plot(xr, peak_areas)
	
	a6,a5,a4,a3,a2,a1,a0=np.polyfit(xr[-21:],peak_areas[-21:],6)
	fit=a0+a1*xr[-21:]+a2*xr[-21:]**2+a3*xr[-21:]**3+a4*xr[-21:]+a4*xr[-21:]**4+a5*xr[-21:]**5+a6*xr[-21:]**6
	print a0,a1,a2,a3,a4,a5,a6	
	#plt.xlim([600,810])
	#plt.ylim([0,400])
	plt.plot(xr[-21:], fit,'--',label='fit')
	print fit
	plt.xlabel('Voltage',size=40)
	plt.ylabel('Peak Area at FWHM',size=40)
	plt.show()

	return peaks,peak_areas
def doublepeak():
	spec = np.transpose(np.loadtxt('02_03_2016_13_40_42.dat',skiprows=3))
	plt.plot(spec[0],spec[1],'g', label='Cesium-137') 
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.xlabel('Bin',size=40)
	plt.ylabel('Intensity[counts]',size=40)
	plt.xlim([0,2])
	plt.legend(fontsize=25)
	
	plt.show()
def backgsub():
	background = np.transpose(np.loadtxt('02_04_2016_15_23_04.dat',skiprows=2))
	csspec= np.transpose(np.loadtxt('02_04_2016_13_44_43.dat', skiprows=2))
	plt.plot(csspec[0], csspec[1],label='Cesium-137')
	plt.plot(background[0], background[1],label='background')
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.xlabel('Bin',size=40)
	plt.ylabel('Intensity[counts]',size=40)
	plt.legend(fontsize=20)
	plt.show()
	peak_x= np.where(csspec[1] == max(csspec[1]))[0][0]
	print peak_x
	print csspec[1][peak_x]
	binx = csspec[0][peak_x]
	plt.plot(csspec[0], csspec[1]-background[1],label='Cesium-137')
	#plt.axvline(x=binx,ls='--',label= 'Peak at bin '+str(binx)[0:4])
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.xlabel('Bin',size=40)
	plt.ylabel('Intensity[counts]',size=40)
	plt.legend(fontsize=20)
	plt.show()

def massattenuation():
	csspec= np.transpose(np.loadtxt('02_04_2016_13_44_43.dat', skiprows=2))
	background = np.transpose(np.loadtxt('02_04_2016_15_23_04.dat',skiprows=2))
	aluminch = np.transpose(np.loadtxt('02_04_2016_13_50_19.dat',skiprows=2))
	alum15mm = np.transpose(np.loadtxt('02_04_2016_13_56_09.dat',skiprows=2))
	alum5mm = np.transpose(np.loadtxt('02_04_2016_14_41_27.dat',skiprows=2))
	cu639 = np.transpose(np.loadtxt('02_04_2016_14_45_49.dat',skiprows=2))
	cuall =np.transpose(np.loadtxt('02_04_2016_14_52_49.dat',skiprows=2))
	cu63922 = np.transpose(np.loadtxt('02_04_2016_14_56_52.dat',skiprows=2))
	pb155 =np.transpose(np.loadtxt('02_04_2016_15_04_22.dat',skiprows=2))
	pb153 =np.transpose(np.loadtxt('02_04_2016_15_08_55.dat',skiprows=2))
	pb151 = np.transpose(np.loadtxt('02_04_2016_15_13_11.dat',skiprows=2))
	pb157=np.transpose(np.loadtxt('02_04_2016_15_17_30.dat',skiprows=2))
	#now sodium stuff
	naspec= np.transpose(np.loadtxt('02_04_2016_15_28_03.dat', skiprows=2))
	aluminch2= np.transpose(np.loadtxt('02_04_2016_15_37_54.dat', skiprows=2))
	alum15mm2= np.transpose(np.loadtxt('02_04_2016_16_02_20.dat', skiprows=2))
	alum106mm2= np.transpose(np.loadtxt('02_04_2016_16_07_08.dat', skiprows=2))
	cu6392= np.transpose(np.loadtxt('02_04_2016_16_15_41.dat', skiprows=2))
	cu63922_2= np.transpose(np.loadtxt('02_04_2016_16_19_39.dat', skiprows=2))
	cuall2= np.transpose(np.loadtxt('02_04_2016_16_23_53.dat', skiprows=2))
	pb153_2= np.transpose(np.loadtxt('02_04_2016_16_31_53.dat', skiprows=2))
	pb155_2 = np.transpose(np.loadtxt('02_04_2016_16_36_14.dat', skiprows=2))
	pb157_2  = np.transpose(np.loadtxt('02_04_2016_16_40_18.dat', skiprows=2))
	specs_cs = [csspec, aluminch, alum15mm, alum5mm, cu639, cuall, cu63922, pb155, pb153, pb151, pb157]
	specs_na = [naspec, aluminch2, alum15mm2, alum106mm2, cu6392,cu63922_2, cuall2, pb153_2, pb155_2, pb157_2]
	print len(specs_na)
	labels_cs = ['Cesium', '2.54 cm  Al', '15 mm Al', '5 mm  Al', '6.39 mm Cu', '10 mm Cu', '8.6 mm Cu','7.75 mm Pb', '4.65 mm Pb', '1.55 mm Pb', '10.85 mm Pb']

	labels_na = ['Sodium', '2.54 cm  Al', '15 mm Al', '1.06 mm  Al', '6.39 mm Cu', '8.6 mm Cu', '10 mm Cu', '4.65 cm Pb','7.75 cm Pb', '10.85 cm Pb']
	print len(labels_na)
	for i in range(len(specs_cs)):
		plt.plot(specs_cs[i][0], specs_cs[i][1],label=labels_cs[i])
	spec_max_cs = [max(specs_cs[i][1]) for i in range(len(specs_cs))]
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.xlabel('Bin',size=40)
	plt.ylabel('Intensity[counts]',size=40)
	plt.legend(fontsize=30)

	plt.xlim([2.8, 3.2])
	plt.show()
	for i in range(len(specs_na)):
		plt.plot(specs_na[i][0], specs_na[i][1],label=labels_na[i])
	spec_max_na = [max(specs_na[i][1]) for i in range(len(specs_na))]
	plt.tick_params(axis='both', which='major', labelsize=30)
	plt.tick_params(axis='both', which='minor', labelsize=25)
	plt.xlabel('Bin',size=40)
	plt.ylabel('Intensity[counts]',size=40)
	plt.legend(fontsize=30)
	plt.show()
	return spec_max_cs,spec_max_na
def massatt(mat,width,rat):
	densities = {'lead':11.34,'cu':8.96,'al':2.7}
	dens = densities[mat]
	return -np.log(rat)/(dens*width)
width_lead = [.155, .465, .775, 1.085]
rat_lead = [0.71505376, 0.69175627,0.48924731,0.43369176]
width_al=[1.5,2.54]
rat_al=[0.81899642,0.70071685]
rat_cu=[0.76523297,0.65949821,0.58602151]
width_cu =[.639,.86,1.0]
lead = [massatt('lead', width_lead[i], rat_lead[i]) for i in range(len(width_lead))]
al = [massatt('al', width_al[i], rat_al[i]) for i in range(len(width_al))]
cu = [massatt('cu', width_cu[i], rat_cu[i]) for i in range(len(width_cu))]
print 'std al', standdev(al),standdev(al)/np.sqrt(3.)
print 'std lead', standdev(lead), standdev(lead)/np.sqrt(4.)
print 'std cu', standdev(cu),standdev(cu)/np.sqrt(3.)
print 'mean al', np.mean(al)
print 'mean lead', np.mean(lead)
print 'mean cu', np.mean(cu)

#peakdat = plot_gain()
